name: Manual Version Example

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0, 2.0.0-beta.1)'
        required: true
        type: string
      
      release-type:
        description: 'Release type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - beta
          - alpha
          - rc

jobs:
  package-with-manual-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}
      
      - name: Determine version
        id: version
        run: |
          VERSION="${{ inputs.version }}"
          
          # Add suffix based on release type if not already present
          if [ "${{ inputs.release-type }}" != "release" ] && [[ ! "$VERSION" =~ -[a-zA-Z] ]]; then
            case "${{ inputs.release-type }}" in
              beta)
                VERSION="${VERSION}-beta"
                ;;
              alpha)
                VERSION="${VERSION}-alpha"
                ;;
              rc)
                VERSION="${VERSION}-rc"
                ;;
            esac
          fi
          
          echo "final_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
      
      - name: Package Extension with Manual Version
        id: package
        uses: ./.github/actions/joomla-packager
        with:
          extension-name: 'mod_example'
          extension-xml: 'mod_example.xml'
          extension-type: 'module'
          author: 'Your Name'
          copyright-holder: 'Your Company'
          copyright-start-year: '2024'
          github-token: ${{ secrets.GH_PAT }}
          manual-version: ${{ steps.version.outputs.final_version }}
          # Set prerelease based on type
          create-release: 'true'
      
      - name: Update release if prerelease
        if: inputs.release-type != 'release'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          # Update the release to mark it as prerelease
          gh release edit ${{ steps.version.outputs.final_version }} --prerelease
      
      - name: Summary
        run: |
          echo "## 📦 Manual Version Release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Version Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.final_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ inputs.release-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: ${{ steps.package.outputs.package-path }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.release-type }}" != "release" ]; then
            echo "⚠️ **Note**: This is a pre-release version" >> $GITHUB_STEP_SUMMARY
          fi

  # Example: Semantic versioning workflow
  semantic-version-example:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}
      
      - name: Get next semantic version
        id: semver
        run: |
          # This is a simplified example - in real use, you might use a tool like semantic-release
          # or conventional-changelog to determine the next version based on commits
          
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          
          # Simple version bump logic (you'd want more sophisticated logic in production)
          if [[ "$LATEST_TAG" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            
            # Check commit messages for version bump indicators
            if git log ${LATEST_TAG}..HEAD --grep="BREAKING CHANGE" --grep="!:" | grep -q .; then
              # Major version bump
              NEXT_VERSION="$((MAJOR + 1)).0.0"
            elif git log ${LATEST_TAG}..HEAD --grep="^feat" | grep -q .; then
              # Minor version bump
              NEXT_VERSION="${MAJOR}.$((MINOR + 1)).0"
            else
              # Patch version bump
              NEXT_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            fi
          else
            NEXT_VERSION="1.0.0"
          fi
          
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next semantic version: $NEXT_VERSION"
      
      - name: Package with semantic version
        uses: ./.github/actions/joomla-packager
        with:
          extension-name: 'mod_example'
          extension-xml: 'mod_example.xml'
          extension-type: 'module'
          author: 'Your Name'
          copyright-holder: 'Your Company'
          copyright-start-year: '2024'
          github-token: ${{ secrets.GH_PAT }}
          manual-version: ${{ steps.semver.outputs.next_version }}
