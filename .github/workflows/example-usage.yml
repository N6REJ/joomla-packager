name: Example - Package Joomla Extension

on:
  # Trigger on merged pull requests
  pull_request:
    types: [closed]
    branches:
      - main
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      pre-release:
        description: 'Create as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  package-extension:
    # Only run if PR was merged or manually triggered
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation
          token: ${{ secrets.GH_PAT }}
      
      - name: Package Joomla Extension
        id: package
        uses: ./.github/actions/joomla-packager
        with:
          # Required inputs - customize these for your extension
          extension-name: 'mod_example'
          extension-xml: 'mod_example.xml'
          extension-type: 'module'
          author: 'Your Name'
          copyright-holder: 'Your Company (YourHandle)'
          copyright-start-year: '2024'
          github-token: ${{ secrets.GH_PAT }}
          
          # Optional inputs - uncomment and modify as needed
          # php-version: '8.2'
          # changelog-file: 'CHANGELOG.md'
          # helper-file: 'helper.php'
          # license-file: 'LICENSE'
          # favicon-file: 'icon.png'
          # updates-xml-file: 'updates.xml'
          # css-dir: 'assets/css'
          # js-dir: 'assets/js'
          # tmpl-dir: 'templates'
          # language-dir: 'language'
          # package-dir: 'dist'
          # dir-tree-file: 'structure.txt'
          # generate-changelog: 'true'
          # create-release: 'true'
          # upload-artifact: 'true'
          # update-joomla-server: 'true'
      
      - name: Commit version updates
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          if git diff --exit-code; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "Update version to ${{ steps.package.outputs.version }} [skip ci]"
            git push origin main
          fi
      
      - name: Output summary
        run: |
          echo "## ðŸ“¦ Package Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.package.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Creation Date**: ${{ steps.package.outputs.creation-date }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Package Path**: ${{ steps.package.outputs.package-path }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.package.outputs.release-url }}" ]; then
            echo "- **Release URL**: ${{ steps.package.outputs.release-url }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the package from the release page" >> $GITHUB_STEP_SUMMARY
          echo "2. Install in Joomla via Extension Manager" >> $GITHUB_STEP_SUMMARY
          echo "3. Configure the extension as needed" >> $GITHUB_STEP_SUMMARY

  # Example of extending with additional jobs
  notify-discord:
    needs: package-extension
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if [ -n "$DISCORD_WEBHOOK" ]; then
            curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"ðŸš€ New release created for ${{ github.repository }}!\"}" \
              $DISCORD_WEBHOOK
          fi

  # Example of custom deployment
  deploy-to-demo:
    needs: package-extension
    if: success() && github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to demo site
        run: |
          echo "Deploying to demo site..."
          # Add your deployment logic here
          # For example, using SSH, FTP, or API calls
