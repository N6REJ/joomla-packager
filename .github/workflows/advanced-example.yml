name: Advanced Packaging Example

on:
  workflow_dispatch:
    inputs:
      extension-type:
        description: 'Extension type to package'
        required: true
        default: 'module'
        type: choice
        options:
          - module
          - plugin
          - component
      
      deploy-to-staging:
        description: 'Deploy to staging server'
        required: false
        default: false
        type: boolean
      
      notify-team:
        description: 'Send notifications to team'
        required: false
        default: true
        type: boolean

env:
  # Define extension configurations
  MODULE_NAME: 'mod_example'
  PLUGIN_NAME: 'plg_system_example'
  COMPONENT_NAME: 'com_example'

jobs:
  # Job 1: Validate and prepare
  validate:
    runs-on: ubuntu-latest
    outputs:
      extension-name: ${{ steps.set-extension.outputs.name }}
      extension-xml: ${{ steps.set-extension.outputs.xml }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set extension details
        id: set-extension
        run: |
          case "${{ inputs.extension-type }}" in
            module)
              echo "name=${{ env.MODULE_NAME }}" >> $GITHUB_OUTPUT
              echo "xml=${{ env.MODULE_NAME }}.xml" >> $GITHUB_OUTPUT
              ;;
            plugin)
              echo "name=${{ env.PLUGIN_NAME }}" >> $GITHUB_OUTPUT
              echo "xml=${{ env.PLUGIN_NAME }}.xml" >> $GITHUB_OUTPUT
              ;;
            component)
              echo "name=${{ env.COMPONENT_NAME }}" >> $GITHUB_OUTPUT
              echo "xml=${{ env.COMPONENT_NAME }}.xml" >> $GITHUB_OUTPUT
              ;;
          esac
      
      - name: Validate extension structure
        run: |
          # Add validation logic here
          echo "Validating ${{ inputs.extension-type }} structure..."
          # Check for required files, proper XML structure, etc.

  # Job 2: Run tests
  test:
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['7.4', '8.0', '8.1', '8.2']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, json
      
      - name: Run PHP syntax check
        run: |
          find . -name "*.php" -exec php -l {} \;
      
      - name: Run basic tests
        run: |
          # Add your test commands here
          echo "Running tests on PHP ${{ matrix.php-version }}..."

  # Job 3: Package the extension
  package:
    needs: [validate, test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      version: ${{ steps.package.outputs.version }}
      package-path: ${{ steps.package.outputs.package-path }}
      release-url: ${{ steps.package.outputs.release-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}
      
      - name: Package Extension
        id: package
        uses: ./.github/actions/joomla-packager
        with:
          extension-name: ${{ needs.validate.outputs.extension-name }}
          extension-xml: ${{ needs.validate.outputs.extension-xml }}
          extension-type: ${{ inputs.extension-type }}
          author: 'Your Team'
          copyright-holder: 'Your Company'
          copyright-start-year: '2023'
          github-token: ${{ secrets.GH_PAT }}
          php-version: '8.1'
      
      - name: Generate additional documentation
        run: |
          # Create API documentation, user guide, etc.
          echo "# Installation Guide" > INSTALL.md
          echo "1. Download the package" >> INSTALL.md
          echo "2. Go to Joomla Extension Manager" >> INSTALL.md
          echo "3. Upload and install" >> INSTALL.md
      
      - name: Create checksums
        run: |
          if [ -f "${{ steps.package.outputs.package-path }}" ]; then
            sha256sum "${{ steps.package.outputs.package-path }}" > checksums.txt
            md5sum "${{ steps.package.outputs.package-path }}" >> checksums.txt
          fi

  # Job 4: Security scan
  security:
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run security scan
        run: |
          # Add security scanning tools here
          echo "Running security scan..."
          # Example: Use tools like PHPCS, PHPStan, etc.

  # Job 5: Deploy to staging
  deploy-staging:
    needs: [package, security]
    if: inputs.deploy-to-staging
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.validate.outputs.extension-name }}_${{ needs.package.outputs.version }}
      
      - name: Deploy to staging server
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_KEY: ${{ secrets.STAGING_KEY }}
        run: |
          echo "Deploying to staging server..."
          # Add your deployment script here
          # Example: Use SSH, FTP, or API to deploy

  # Job 6: Notifications
  notify:
    needs: [package, deploy-staging]
    if: always() && inputs.notify-team
    runs-on: ubuntu-latest
    steps:
      - name: Prepare notification message
        id: message
        run: |
          if [ "${{ needs.package.result }}" == "success" ]; then
            STATUS="✅ Success"
            COLOR="28a745"
          else
            STATUS="❌ Failed"
            COLOR="dc3545"
          fi
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "color=$COLOR" >> $GITHUB_OUTPUT
      
      - name: Send Slack notification
        if: vars.SLACK_WEBHOOK
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST $SLACK_WEBHOOK \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "Extension Packaging ${{ steps.message.outputs.status }}",
              "attachments": [{
                "color": "${{ steps.message.outputs.color }}",
                "fields": [
                  {
                    "title": "Extension",
                    "value": "${{ needs.validate.outputs.extension-name }}",
                    "short": true
                  },
                  {
                    "title": "Version",
                    "value": "${{ needs.package.outputs.version }}",
                    "short": true
                  },
                  {
                    "title": "Type",
                    "value": "${{ inputs.extension-type }}",
                    "short": true
                  },
                  {
                    "title": "Deployed to Staging",
                    "value": "${{ inputs.deploy-to-staging && 'Yes' || 'No' }}",
                    "short": true
                  }
                ]
              }]
            }'
      
      - name: Send email notification
        if: vars.EMAIL_ENABLED
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.EMAIL_SERVER }}
          server_port: ${{ secrets.EMAIL_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Extension Package ${{ steps.message.outputs.status }} - ${{ needs.validate.outputs.extension-name }}
          to: ${{ secrets.TEAM_EMAIL }}
          from: GitHub Actions <noreply@github.com>
          body: |
            Extension packaging workflow completed with status: ${{ steps.message.outputs.status }}
            
            Details:
            - Extension: ${{ needs.validate.outputs.extension-name }}
            - Version: ${{ needs.package.outputs.version }}
            - Type: ${{ inputs.extension-type }}
            - Release URL: ${{ needs.package.outputs.release-url }}
            
            View the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # Job 7: Create summary
  summary:
    needs: [validate, package, security, deploy-staging]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create workflow summary
        run: |
          echo "# 📦 Extension Packaging Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📋 Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Extension**: ${{ needs.validate.outputs.extension-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ inputs.extension-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.package.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validate | ${{ needs.validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Package | ${{ needs.package.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.deploy-to-staging }}" == "true" ]; then
            echo "| Deploy Staging | ${{ needs.deploy-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.package.result }}" == "success" ]; then
            echo "## 🎉 Success!" >> $GITHUB_STEP_SUMMARY
            echo "Package created successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📥 Download" >> $GITHUB_STEP_SUMMARY
            echo "- [Release Page](${{ needs.package.outputs.release-url }})" >> $GITHUB_STEP_SUMMARY
            echo "- [Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Failed" >> $GITHUB_STEP_SUMMARY
            echo "The packaging process encountered errors. Please check the logs." >> $GITHUB_STEP_SUMMARY
          fi
