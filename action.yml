name: 'Joomla Extension Packager'
description: 'A composite action to package and release Joomla extensions (modules, plugins, components)'
author: 'N6REJ'

branding:
    icon: 'package'
    color: 'blue'

inputs:
    # Extension identification
    extension-name:
        description: 'Extension folder and file prefix (e.g. mod_example, plg_system_example). If not specified, derived from repository name'
        required: false
        default: ''
    extension-xml:
        description: 'Main XML file (e.g. mod_example.xml). If not specified, derived from extension name'
        required: false
        default: ''
    extension-type:
        description: 'Type of extension (module, plugin, component). If not specified, derived from repository name prefix.'
        required: false
        default: ''

    # Author and copyright
    author:
        description: 'Author name or handle. If not specified, uses the repository owner.'
        required: false
        default: ''
    copyright-holder:
        description: 'Copyright string (e.g. YourName (YourHandle))'
        required: false
        default: ''
    copyright-start-year:
        description: 'Copyright start year'
        required: false
        default: ''

    # Version control
    github-token:
        description: 'GitHub token for authentication'
        required: true
    manual-version:
        description: 'Manual version override (e.g. 1.2.3). If not specified, uses automatic date-based versioning'
        required: false
        default: ''

    # PHP configuration
    php-version:
        description: 'PHP version to use'
        required: false
        default: '8.1'

    # File configurations
    changelog-file:
        description: 'Changelog filename'
        required: false
        default: 'CHANGELOG.md'
    helper-file:
        description: 'Helper PHP file'
        required: false
        default: 'helper.php'
    license-file:
        description: 'License file'
        required: false
        default: 'License.txt'
    favicon-file:
        description: 'Favicon file (leave empty to skip)'
        required: false
        default: 'favicon.ico'
    updates-xml-file:
        description: 'Updates XML file'
        required: false
        default: 'updates.xml'

    # Directory configurations
    css-dir:
        description: 'CSS directory'
        required: false
        default: 'css'
    js-dir:
        description: 'JS directory'
        required: false
        default: 'js'
    tmpl-dir:
        description: 'Template directory'
        required: false
        default: 'tmpl'
    language-dir:
        description: 'Language directory'
        required: false
        default: 'language'
    package-dir:
        description: 'Package output directory (always uses build/)'
        required: false
        default: 'build'

    # Additional features
    dir-tree-file:
        description: 'Directory tree output file (leave empty to skip)'
        required: false
        default: 'directory-structure.txt'
    file-updates:
        description: 'Whether to update version and copyright in files'
        required: false
        default: 'true'
    generate-changelog:
        description: 'Whether to generate changelog from commits'
        required: false
        default: 'true'
    create-release:
        description: 'Whether to create a GitHub release'
        required: false
        default: 'true'
    upload-artifact:
        description: 'Whether to upload as GitHub artifact'
        required: false
        default: 'true'
    update-joomla-server:
        description: 'Whether to update Joomla update server XML'
        required: false
        default: 'true'

outputs:
    version:
        description: 'The generated version number'
        value: ${{ steps.set_version.outputs.version }}
    creation-date:
        description: 'The creation date'
        value: ${{ steps.set_version.outputs.creation_date }}
    package-path:
        description: 'Path to the created package'
        value: ${{ steps.create_package.outputs.package_path }}
    release-url:
        description: 'URL of the created release'
        value: ${{ steps.create_release.outputs.url }}
    dir-tree-path:
        description: 'Path to the directory tree file'
        value: ${{ steps.create_package.outputs.dir_tree_path }}

runs:
    using: 'composite'
    steps:
        -   name: Determine extension details
            id: extension_details
            shell: bash
            run: |
                # Get repository name
                REPO_NAME="${{ github.event.repository.name }}"
                echo "Repository name: $REPO_NAME"
                
                # Determine extension name
                if [ -n "${{ inputs.extension-name }}" ]; then
                  EXTENSION_NAME="${{ inputs.extension-name }}"
                  echo "Using provided extension name: $EXTENSION_NAME"
                else
                  # Derive from repository name
                  # Common patterns: mod_example, mod-example, mod.example, example-module
                  EXTENSION_NAME="$REPO_NAME"
                
                  # Replace common separators with underscores
                  EXTENSION_NAME="${EXTENSION_NAME//-/_}"
                  EXTENSION_NAME="${EXTENSION_NAME//./_}"
                
                  # Check if it already has a valid Joomla prefix
                  if [[ ! "$EXTENSION_NAME" =~ ^(mod_|plg_|com_) ]]; then
                    # Add prefix based on extension type
                    case "${{ inputs.extension-type }}" in
                      module)
                        EXTENSION_NAME="mod_${EXTENSION_NAME}"
                        ;;
                      plugin)
                        # For plugins, we need to determine the group
                        # Default to system if not clear from name
                        if [[ "$EXTENSION_NAME" =~ (system|content|user|authentication|search|editor|captcha|finder|installer|quickicon) ]]; then
                          EXTENSION_NAME="plg_${EXTENSION_NAME}"
                        else
                          EXTENSION_NAME="plg_system_${EXTENSION_NAME}"
                        fi
                        ;;
                      component)
                        EXTENSION_NAME="com_${EXTENSION_NAME}"
                        ;;
                    esac
                  fi
                
                  # Remove common suffixes if they exist
                  EXTENSION_NAME="${EXTENSION_NAME%_module}"
                  EXTENSION_NAME="${EXTENSION_NAME%_plugin}"
                  EXTENSION_NAME="${EXTENSION_NAME%_component}"
                
                  echo "Derived extension name: $EXTENSION_NAME"
                fi
                
                # Determine XML file
                if [ -n "${{ inputs.extension-xml }}" ]; then
                  EXTENSION_XML="${{ inputs.extension-xml }}"
                  echo "Using provided XML file: $EXTENSION_XML"
                else
                  # Derive from extension name
                  EXTENSION_XML="${EXTENSION_NAME}.xml"
                  echo "Derived XML file: $EXTENSION_XML"
                fi
                
                # Validate that the XML file exists
                if [ ! -f "$EXTENSION_XML" ]; then
                  echo "::warning::XML file not found at expected location: $EXTENSION_XML"
                  echo "Looking for XML files in the repository..."
                
                  # Try to find any XML file that might be the manifest
                  XML_FILES=$(find . -maxdepth 1 -name "*.xml" -not -name "updates.xml" -not -name "config.xml" | head -5)
                
                  if [ -n "$XML_FILES" ]; then
                    echo "Found XML files:"
                    echo "$XML_FILES"
                
                    # If only one XML file found, use it
                    XML_COUNT=$(echo "$XML_FILES" | wc -l)
                    if [ "$XML_COUNT" -eq 1 ]; then
                      EXTENSION_XML=$(echo "$XML_FILES" | head -1 | sed 's|^\./||')
                      echo "Using found XML file: $EXTENSION_XML"
                    else
                      echo "::error::Multiple XML files found. Please specify the extension-xml input."
                      exit 1
                    fi
                  else
                    echo "::error::No XML manifest file found. Please specify the extension-xml input."
                    exit 1
                  fi
                fi
                
                # Output the determined values
                echo "extension_name=$EXTENSION_NAME" >> $GITHUB_OUTPUT
                echo "extension_xml=$EXTENSION_XML" >> $GITHUB_OUTPUT
                
                echo "Final extension details:"
                echo "  Name: $EXTENSION_NAME"
                echo "  XML: $EXTENSION_XML"

        -   name: Set up PHP
            uses: shivammathur/setup-php@v2
            with:
                php-version: ${{ inputs.php-version }}

        -   name: Generate version and dates
            id: set_version
            shell: bash
            run: |
                CREATION_DATE=$(date +'%Y %B %d')
                CURRENT_YEAR=$(date +'%Y')
                
                # Check if manual version is provided
                if [ -n "${{ inputs.manual-version }}" ]; then
                  VERSION="${{ inputs.manual-version }}"
                  echo "Using manual version: $VERSION"
                else
                  # Use automatic date-based versioning
                  BASE_VERSION=$(date +'%Y.%m.%d')
                
                  git fetch --tags
                
                  if git rev-parse "$BASE_VERSION" >/dev/null 2>&1; then
                    MATCHING_TAGS=$(git tag -l "$BASE_VERSION.*")
                    if [ -z "$MATCHING_TAGS" ]; then
                      VERSION="${BASE_VERSION}.1"
                    else
                      HIGHEST_SUBVERSION=$(echo "$MATCHING_TAGS" | sed "s/^$BASE_VERSION\.//" | sort -n | tail -1)
                      NEXT_SUBVERSION=$((HIGHEST_SUBVERSION + 1))
                      VERSION="${BASE_VERSION}.$NEXT_SUBVERSION"
                    fi
                  else
                    VERSION="$BASE_VERSION"
                  fi
                  echo "Using automatic version: $VERSION"
                fi
                
                echo "version=$VERSION" >> $GITHUB_OUTPUT
                echo "creation_date=$CREATION_DATE" >> $GITHUB_OUTPUT
                echo "current_year=$CURRENT_YEAR" >> $GITHUB_OUTPUT

        -   name: Create package
            id: create_package
            shell: bash
            run: |
                EXTENSION_NAME="${{ steps.extension_details.outputs.extension_name }}"
                EXTENSION_XML="${{ steps.extension_details.outputs.extension_xml }}"
                VERSION="${{ steps.set_version.outputs.version }}"

                if [ -n "$RUNNER_TEMP" ]; then
                  OUTER_BUILD_DIR="$RUNNER_TEMP/joomla-build-$EXTENSION_NAME-$VERSION"
                else
                  OUTER_BUILD_DIR="/tmp/joomla-build-$EXTENSION_NAME-$VERSION"
                fi
                rm -rf "$OUTER_BUILD_DIR"
                mkdir -p "$OUTER_BUILD_DIR"

                EXCLUDES=(
                  --exclude='.git/'
                  --exclude='.github/'
                  --exclude='.DS_Store'
                  --exclude='Thumbs.db'
                  --exclude='node_modules/'
                  --exclude='.packagerignore'
                  --exclude='build/'
                  --exclude='package/'
                  --exclude='.gitignore'
                  --exclude='*.bak'
                  --exclude='*.zip'
                )
                if [ -f .packagerignore ]; then
                  while IFS= read -r line; do
                    [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
                    EXCLUDES+=(--exclude="$line")
                  done < .packagerignore
                fi

                rsync -a ./ "$OUTER_BUILD_DIR/" "${EXCLUDES[@]}"

                # Generate directory tree from OUTER_BUILD_DIR
                if [ -n "${{ inputs.dir-tree-file }}" ]; then
                  DIR_TREE_PATH="$OUTER_BUILD_DIR/${{ inputs.dir-tree-file }}"
                  if command -v tree &> /dev/null; then
                    tree "$OUTER_BUILD_DIR" > "$DIR_TREE_PATH"
                  else
                    find "$OUTER_BUILD_DIR" -type f | sort > "$DIR_TREE_PATH"
                  fi
                  echo "dir_tree_path=$DIR_TREE_PATH" >> $GITHUB_OUTPUT
                fi

                # Create ZIP archive from inside OUTER_BUILD_DIR so the zip contains only the files at the root
                cd "$OUTER_BUILD_DIR"
                zip -r "${EXTENSION_NAME}_${VERSION}.zip" .
                cd -

                echo "package_path=$OUTER_BUILD_DIR/${EXTENSION_NAME}_${VERSION}.zip" >> $GITHUB_OUTPUT

        -   name: Upload extension package zip
            if: inputs.upload-artifact == 'true'
            uses: actions/upload-artifact@v4
            with:
                name: ${{ steps.extension_details.outputs.extension_name }}_${{ steps.set_version.outputs.version }}
                path: ${{ steps.create_package.outputs.package_path }}
                retention-days: 90
                if-no-files-found: warn

        -   name: Upload directory tree file
            if: inputs.upload-artifact == 'true' && steps.create_package.outputs.dir_tree_path != ''
            uses: actions/upload-artifact@v4
            with:
                name: directory-structure.txt
                path: ${{ steps.create_package.outputs.dir_tree_path }}
                retention-days: 90
                if-no-files-found: warn

        -   name: Update Joomla update server XML
            if: inputs.update-joomla-server == 'true'
            shell: bash
            run: |
                EXTENSION_NAME="${{ steps.extension_details.outputs.extension_name }}"
                VERSION="${{ steps.set_version.outputs.version }}"
                UPDATES_XML="${{ inputs.updates-xml-file }}"
                if [ -f "$UPDATES_XML" ]; then
                  cp "$UPDATES_XML" "${UPDATES_XML}.bak"

                  DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}/${EXTENSION_NAME}_${VERSION}.zip"

                  # Update version
                  sed -i "s|<version>.*</version>|<version>${VERSION}</version>|g" "$UPDATES_XML"

                  # Update download URL
                  sed -i "s|<downloadurl>.*</downloadurl>|<downloadurl>$DOWNLOAD_URL</downloadurl>|g" "$UPDATES_XML"

                  echo "Updated $UPDATES_XML file with new version and download URL"
                  cat "$UPDATES_XML"
                else
                  echo "::warning::${{ inputs.updates-xml-file }} file not found in repository"
                fi
